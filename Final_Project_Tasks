#Task 1: Clone the project repository

theia@theia-aigulmellin:/home/project/final_project$ git clone https://github.com/ibm-developer-skills-network/oaqjp-final-project-emb-ai.git
Cloning into 'oaqjp-final-project-emb-ai'...
remote: Enumerating objects: 16, done.
remote: Counting objects: 100% (7/7), done.
remote: Compressing objects: 100% (7/7), done.
remote: Total 16 (delta 3), reused 0 (delta 0), pack-reused 9
Receiving objects: 100% (16/16), 8.21 KiB | 8.21 MiB/s, done.
Resolving deltas: 100% (3/3), done.

#Task 2: Create an emotion detection application using Watson NLP library

import requests
def emotion_detector(text_to_analyze):
    url = 'https://sn-watson-emotion.labs.skills.network/v1/watson.runtime.nlp.v1/NIpService/Emot'
    headers = {"grpc-metadata-mm-model-id": "emotion aggregated-workflow_lang_en_stock"}
    input_json = {"raw_document": {"text": text_to_analyze}}
    
    response = requests.post(url, json=input_json, headers=headers)
    
    if response.status_code == 200:
        return response.json()['text']
    else:
        return "Error: Failed to analyze emotion."

# Test the function with the provided text
text_to_analyze = "I love this new technology."
print(emotion_detector(text_to_analyze))

#Task 3: Format the output of the application

import requests
import json


def detect_emotion(text_to_analyze):
    url = 'https://sn-watson-emotion.labs.skills.network/v1/watson.runtime.nlp.v1/NIpService/EmotionPredict'
    headers = {"grpc-metadata-mm-model-id": "emotion aggregated-workflow_lang_en_stock"}
    input_json = {"raw_document": {"text": text_to_analyze}}

  try:
        response = requests.post(url, headers=headers, json=input_json)
        formatted_response = json.loads(response.text)

        if response.status_code == 200:
            return output
        elif response.status_code == 400:
            output = {
                'anger': None,
                'disgust': None, 
                'fear': None, 
                'joy': None, 
                'sadness': None, 
                'dominant_emotion': None
            }
           
         return output
 except Exception as e:
       print("Error occurred:", e)
      finally:
         return None

    #try:
   #     response = requests.post(url, headers=headers, json=input_json)
  #      response_json = response.json()
        
        # Extract required emotions and their scores
   #     emotions = response_json['text']['emotions']
   #     emotion_scores = {emotion['name']: emotion['score'] for emotion in emotions}
        
   #     # Find dominant emotion
    #    dominant_emotion = max(emotion_scores, key=emotion_scores.get)
        
  #      # Prepare output format
  #      output1 = {
  #          'anger': emotion_scores.get('anger', 0),
  #          'disgust': emotion_scores.get('disgust', 0),
  #          'fear': emotion_scores.get('fear', 0),
  #          'joy': emotion_scores.get('joy', 0),
  #          'sadness': emotion_scores.get('sadness', 0),
  #          'dominant_emotion': dominant_emotion
  #      }
        
 #       return output1
     
  #  except Exception as e:
   #     print("Error occurred:", e)
  #      return None   



def emotion_predictor(detected_text):

    try:
       if all(value is None for value in detected_text.values()):
          return detected_text

        if detected_text['emotionPredictions'] is not None:
            emotions = detected_text['emotionPredictions'][0]['emotion']
            anger = emotions['anger']
            disgust = emotions['disgust']
            fear = emotions['fear']
            joy = emotions['joy']
            sadness = emotions['sadness']
            dominant_emotion = max(emotions, key=emotions.get)
            output = {
                'anger': anger_score,
                'disgust': disgust_score,
                'fear': fear_score,
                'joy': joy_score,
                'sadness': sadness_score,
                'dominant_emotion': dominant_emotion
            }
            return output
    except Exception as e:
        print("Error occurred:", e)
     finally:
           return None   

# Test the function with the provided text
text_to_analyze = "I love this new technology."
result = detect_emotion(text_to_analyze)
print(result)




    Task 4: Package the application
    Task 5: Run Unit tests on your application
    Task 6: Deploy as web application using Flask
    Task 7: Incorporate Error handling
    Task 8: Run static code analysis
